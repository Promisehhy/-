/*转换的基本规则如下：

操作数：当遇到操作数（数字或变量）时，直接将其输出到后缀表达式。
左括号：遇到左括号 ( 时，将其压入栈中。
右括号：遇到右括号 ) 时，从栈中弹出并输出所有运算符，直到遇到左括号 (。左括号只被弹出，不输出。
运算符：遇到运算符时，比较其与栈顶运算符的优先级：
如果栈为空或栈顶元素是左括号 (，或者运算符优先级高于栈顶运算符，则将其压入栈中。
否则，弹出栈顶运算符并输出，直到遇到优先级更低的元素或栈为空或栈顶为左括号，然后将当前运算符压入栈中。
表达式结束：当输入表达式结束时，将栈中所有剩余的运算符依次弹出并输出。

例如，中缀表达式 A * (B + C) / D 转换为后缀表达式时，步骤如下：
A 是操作数，输出 A。
* 压入栈。
( 压入栈。
B 是操作数，输出 B。
+ 压入栈。
C 是操作数，输出 C。
遇到 )，弹出 + 并输出，弹出 (（不输出）。
/ 遇到栈顶的 *，由于 * 和 / 优先级相同，弹出 * 并输出，然后压入 /。
D 是操作数，输出 D。
表达式结束，栈中剩余 /，弹出并输出。
最终得到的后缀表达式为：A B C + * D /。*/

#include <iostream>
#include <stack>
#include <string>

using namespace std;

// 检查字符是否是运算符
bool isOperator(char c) {
    return c == '+' || c == '-' || c == '*' || c == '/';
}

// 检查运算符的优先级
int getPriority(char op) {
    if (op == '+' || op == '-') return 1;
    if (op == '*' || op == '/') return 2;
    return 0;
}

// 将中缀表达式转换为后缀表达式
string infixToPostfix(const string& infix) {
    stack<char> s;
    string postfix;

    for (char c : infix) {
        if (isalnum(c)) {
            postfix += c;
        } else if (c == '(') {
            s.push(c);
        } else if (c == ')') {
            while (!s.empty() && s.top() != '(') {
                postfix += s.top();
                s.pop();
            }
            if (!s.empty()) s.pop(); // 弹出左括号 '('
        } else if (isOperator(c)) {
            while (!s.empty() && getPriority(s.top()) >= getPriority(c)) {
                postfix += s.top();
                s.pop();
            }
            s.push(c);
        }
    }

    // 弹出栈中剩余的所有运算符
    while (!s.empty()) {
        postfix += s.top();
        s.pop();
    }

    return postfix;
}

int main() {
    string infixExp = "A*(B+C)/D";
    string postfixExp = infixToPostfix(infixExp);
    cout << "Infix: " << infixExp << endl;
    cout << "Postfix: " << postfixExp << endl;
    return 0;
}
